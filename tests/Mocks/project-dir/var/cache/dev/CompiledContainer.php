<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'Kuick\\App\\Listeners\\CommandLaunchingListener' => 'get1',
  'Kuick\\App\\Listeners\\LocalizingListener' => 'get2',
  'subEntry1' => 'get3',
  'subEntry2' => 'get4',
  'subEntry3' => 'get5',
  'Kuick\\App\\Listeners\\EventLoggingListener' => 'get6',
  'subEntry4' => 'get7',
  'Kuick\\App\\Listeners\\RequestHandlingListener' => 'get8',
  'subEntry5' => 'get9',
  'subEntry6' => 'get10',
  'Kuick\\App\\Listeners\\ResponseEmittingListener' => 'get11',
  'Kuick\\Http\\Server\\ExceptionHtmlRequestHandler' => 'get12',
  'subEntry7' => 'get13',
  'Kuick\\Routing\\RoutingMiddleware' => 'get14',
  'subEntry8' => 'get15',
  'subEntry9' => 'get16',
  'Kuick\\Security\\SecurityMiddleware' => 'get17',
  'subEntry10' => 'get18',
  'subEntry11' => 'get19',
  'Kuick\\Ops\\Security\\OpsGuard' => 'get20',
  'subEntry12' => 'get21',
  'Kuick\\Ops\\UI\\OpsController' => 'get22',
  'subEntry13' => 'get23',
  'Kuick\\Security\\Guardhouse' => 'get24',
  'Kuick\\Routing\\Router' => 'get25',
  'kuick.app.listeners' => 'get26',
  'Psr\\Log\\LoggerInterface' => 'get27',
  'Psr\\Http\\Server\\RequestHandlerInterface' => 'get28',
  'kuick.app.timezone' => 'get29',
  'kuick.app.monolog.usemicroseconds' => 'get30',
  'kuick.app.name' => 'get31',
  'kuick.app.charset' => 'get32',
  'kuick.app.locale' => 'get33',
  'kuick.app.monolog.level' => 'get34',
  'kuick.app.monolog.handlers' => 'get35',
  'subEntry14' => 'get36',
  'example' => 'get37',
  'kuick.app.env' => 'get38',
  'kuick.app.projectDir' => 'get39',
  'kuick.ops.guard.token' => 'get40',
  'Kuick\\Http\\Server\\ExceptionRequestHandlerInterface' => 'get41',
  'subEntry15' => 'get42',
  'Psr\\EventDispatcher\\ListenerProviderInterface' => 'get43',
  'Psr\\EventDispatcher\\EventDispatcherInterface' => 'get44',
  'subEntry16' => 'get45',
  'Kuick\\App\\SystemCacheInterface' => 'get46',
  'subEntry17' => 'get47',
  'subEntry18' => 'get48',
  'DI\\Container' => 'get49',
);

    protected function get1()
    {
        $object = new Kuick\App\Listeners\CommandLaunchingListener();
        return $object;
    }

    protected function get3()
    {
        return $this->delegateContainer->get('kuick.app.locale');
    }

    protected function get4()
    {
        return $this->delegateContainer->get('kuick.app.timezone');
    }

    protected function get5()
    {
        return $this->delegateContainer->get('kuick.app.charset');
    }

    protected function get2()
    {
        $object = new Kuick\App\Listeners\LocalizingListener($this->get3(), $this->get4(), $this->get5());
        return $object;
    }

    protected function get7()
    {
        return $this->delegateContainer->get('Psr\\Log\\LoggerInterface');
    }

    protected function get6()
    {
        $object = new Kuick\App\Listeners\EventLoggingListener($this->get7());
        return $object;
    }

    protected function get9()
    {
        return $this->delegateContainer->get('Psr\\Http\\Server\\RequestHandlerInterface');
    }

    protected function get10()
    {
        return $this->delegateContainer->get('Psr\\EventDispatcher\\EventDispatcherInterface');
    }

    protected function get8()
    {
        $object = new Kuick\App\Listeners\RequestHandlingListener($this->get9(), $this->get10());
        return $object;
    }

    protected function get11()
    {
        $object = new Kuick\App\Listeners\ResponseEmittingListener();
        return $object;
    }

    protected function get13()
    {
        return $this->delegateContainer->get('Psr\\Log\\LoggerInterface');
    }

    protected function get12()
    {
        $object = new Kuick\Http\Server\ExceptionHtmlRequestHandler($this->get13());
        return $object;
    }

    protected function get15()
    {
        return $this->delegateContainer->get('Kuick\\Routing\\Router');
    }

    protected function get16()
    {
        return $this->delegateContainer->get('Psr\\Log\\LoggerInterface');
    }

    protected function get14()
    {
        $object = new Kuick\Routing\RoutingMiddleware($this->get15(), $this->get16());
        return $object;
    }

    protected function get18()
    {
        return $this->delegateContainer->get('Kuick\\Security\\Guardhouse');
    }

    protected function get19()
    {
        return $this->delegateContainer->get('Psr\\Log\\LoggerInterface');
    }

    protected function get17()
    {
        $object = new Kuick\Security\SecurityMiddleware($this->get18(), $this->get19());
        return $object;
    }

    protected function get21()
    {
        return $this->delegateContainer->get('kuick.ops.guard.token');
    }

    protected function get20()
    {
        $object = new Kuick\Ops\Security\OpsGuard($this->get21());
        return $object;
    }

    protected function get23()
    {
        return $this->delegateContainer->get('DI\\Container');
    }

    protected function get22()
    {
        $object = new Kuick\Ops\UI\OpsController($this->get23());
        return $object;
    }

    protected function get24()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container, \Psr\Log\LoggerInterface $logger, \Kuick\App\SystemCacheInterface $cache): \Kuick\Security\Guardhouse {
            $guards = (new \Kuick\App\DependencyInjection\GuardsConfigLoader($cache, $logger))($container->get(\Kuick\App\Kernel::DI_PROJECT_DIR_KEY));
            $guardhouse = new \Kuick\Security\Guardhouse($logger);
            foreach ($guards as $guard) {
                $guardhouse->addGuard($guard->path, $container->get($guard->guardClassName), $guard->methods);
            }
            return $guardhouse;
        }, 'Kuick\\Security\\Guardhouse');
    }

    protected function get25()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container, \Psr\Log\LoggerInterface $logger, \Kuick\App\SystemCacheInterface $cache): \Kuick\Routing\Router {
            $routes = (new \Kuick\App\DependencyInjection\RoutesConfigLoader($cache, $logger))($container->get(\Kuick\App\Kernel::DI_PROJECT_DIR_KEY));
            $router = new \Kuick\Routing\Router($logger);
            foreach ($routes as $route) {
                $router->addRoute($route->path, $container->get($route->controllerClassName), $route->methods);
            }
            return $router;
        }, 'Kuick\\Routing\\Router');
    }

    protected function get26()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container, \Psr\Log\LoggerInterface $logger, \Kuick\App\SystemCacheInterface $cache) {
            return (new \Kuick\App\DependencyInjection\ListenerConfigLoader($cache, $logger))($container->get(\Kuick\App\Kernel::DI_PROJECT_DIR_KEY));
        }, 'kuick.app.listeners');
    }

    protected function get27()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container): \Psr\Log\LoggerInterface {
            $logger = new \Monolog\Logger($container->get(\Kuick\App\KernelInterface::DI_APP_NAME_KEY));
            $logger->useMicrosecondTimestamps((bool) $container->get('kuick.app.monolog.usemicroseconds'));
            $logger->setTimezone(new \DateTimeZone($container->get('kuick.app.timezone')));
            $handlers = $container->get('kuick.app.monolog.handlers');
            $defaultLevel = $container->get('kuick.app.monolog.level') ?? \Psr\Log\LogLevel::WARNING;
            !is_array($handlers) && throw new \Kuick\App\AppException('Logger handlers are invalid, should be an array');
            foreach ($handlers as $handler) {
                $type = $handler['type'] ?? throw new \Kuick\App\AppException('Logger handler type not defined');
                $level = $handler['level'] ?? $defaultLevel;
                //@TODO: extract handler factory to the different class and add missing types
                switch ($type) {
                    case 'fingersCrossed':
                        //@TODO: add more nested handler options
                        $nestedHandler = new \Monolog\Handler\StreamHandler($handler['nestedPath'] ?? 'php://stdout', $handler['nestedLevel'] ?? 'debug');
                        $logger->pushHandler(new \Monolog\Handler\FingersCrossedHandler($nestedHandler, $level));
                        break;
                    case 'firePHP':
                        $logger->pushHandler((new \Monolog\Handler\FirePHPHandler($level)));
                        break;
                    case 'stream':
                        $logger->pushHandler((new \Monolog\Handler\StreamHandler($handler['path'] ?? 'php://stdout', $level)));
                        break;
                    default:
                        throw new \Kuick\App\AppException('Unknown Monolog handler: ' . $type);
                }
            }
            return $logger;
        }, 'Psr\\Log\\LoggerInterface');
    }

    protected function get28()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container, \Psr\Log\LoggerInterface $logger, \Kuick\App\SystemCacheInterface $cache): \Psr\Http\Server\RequestHandlerInterface {
            $requestHandler = new \Kuick\Http\Server\RequestHandler($container->get(\Kuick\Http\Server\ExceptionRequestHandlerInterface::class));
            foreach ((new \Kuick\App\DependencyInjection\MiddlewareConfigLoader($cache, $logger))($container->get(\Kuick\App\Kernel::DI_PROJECT_DIR_KEY)) as $middlewareClassName) {
                $requestHandler->addMiddleware($container->get($middlewareClassName));
            }
            return $requestHandler;
        }, 'Psr\\Http\\Server\\RequestHandlerInterface');
    }

    protected function get29()
    {
                $value = $_ENV['KUICK_APP_TIMEZONE'] ?? $_SERVER['KUICK_APP_TIMEZONE'] ?? getenv('KUICK_APP_TIMEZONE');
        if (false !== $value) return $value;
        if (!true) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'KUICK_APP_TIMEZONE' has not been defined");
        }
        return 'Europe/Warsaw';
    }

    protected function get30()
    {
                $value = $_ENV['KUICK_APP_MONOLOG_USEMICROSECONDS'] ?? $_SERVER['KUICK_APP_MONOLOG_USEMICROSECONDS'] ?? getenv('KUICK_APP_MONOLOG_USEMICROSECONDS');
        if (false !== $value) return $value;
        if (!true) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'KUICK_APP_MONOLOG_USEMICROSECONDS' has not been defined");
        }
        return true;
    }

    protected function get31()
    {
                $value = $_ENV['KUICK_APP_NAME'] ?? $_SERVER['KUICK_APP_NAME'] ?? getenv('KUICK_APP_NAME');
        if (false !== $value) return $value;
        if (!true) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'KUICK_APP_NAME' has not been defined");
        }
        return 'Testing App';
    }

    protected function get32()
    {
                $value = $_ENV['KUICK_APP_CHARSET'] ?? $_SERVER['KUICK_APP_CHARSET'] ?? getenv('KUICK_APP_CHARSET');
        if (false !== $value) return $value;
        if (!true) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'KUICK_APP_CHARSET' has not been defined");
        }
        return 'UTF-8';
    }

    protected function get33()
    {
                $value = $_ENV['KUICK_APP_LOCALE'] ?? $_SERVER['KUICK_APP_LOCALE'] ?? getenv('KUICK_APP_LOCALE');
        if (false !== $value) return $value;
        if (!true) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'KUICK_APP_LOCALE' has not been defined");
        }
        return 'en_US.utf-8';
    }

    protected function get34()
    {
                $value = $_ENV['KUICK_APP_MONOLOG_LEVEL'] ?? $_SERVER['KUICK_APP_MONOLOG_LEVEL'] ?? getenv('KUICK_APP_MONOLOG_LEVEL');
        if (false !== $value) return $value;
        if (!true) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'KUICK_APP_MONOLOG_LEVEL' has not been defined");
        }
        return 'WARNING';
    }

    protected function get36()
    {
        return [
            'type' => 'stream',
        ];
    }

    protected function get35()
    {
        return [
            0 => $this->get36(),
        ];
    }

    protected function get37()
    {
                $value = $_ENV['ONLY_LOCAL'] ?? $_SERVER['ONLY_LOCAL'] ?? getenv('ONLY_LOCAL');
        if (false !== $value) return $value;
        if (!true) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'ONLY_LOCAL' has not been defined");
        }
        return '';
    }

    protected function get38()
    {
        return 'dev';
    }

    protected function get39()
    {
        return '/var/www/html/tests/Mocks/project-dir';
    }

    protected function get40()
    {
        return '';
    }

    protected function get42()
    {
        return $this->delegateContainer->get('Psr\\Log\\LoggerInterface');
    }

    protected function get41()
    {
        $object = new Kuick\Http\Server\ExceptionJsonRequestHandler($this->get42());
        return $object;
    }

    protected function get43()
    {
        $object = new Kuick\EventDispatcher\ListenerProvider();
        return $object;
    }

    protected function get45()
    {
        return $this->delegateContainer->get('Psr\\EventDispatcher\\ListenerProviderInterface');
    }

    protected function get44()
    {
        $object = new Kuick\EventDispatcher\EventDispatcher($this->get45());
        return $object;
    }

    protected function get47()
    {
        return $this->delegateContainer->get('kuick.app.projectDir');
    }

    protected function get48()
    {
        return $this->delegateContainer->get('kuick.app.env');
    }

    protected function get46()
    {
        $object = new Kuick\App\SystemCache($this->get47(), $this->get48());
        return $object;
    }

    protected function get49()
    {
        $object = new DI\Container([
        ], NULL, NULL);
        return $object;
    }

}
